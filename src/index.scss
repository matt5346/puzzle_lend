@font-face {
  font-family: 'Roboto';
  src: url('./common/assets/fonts/Roboto-Regular.eot') format("embedded-opentype"),
      url('./common/assets/fonts/Roboto-Regular.svg') format("svg"),
      url('./common/assets/fonts/Roboto-Regular.ttf') format("truetype"),
      url('./common/assets/fonts/Roboto-Regular.woff') format("woff"),
      url('./common/assets/fonts/Roboto-Regular.woff2') format("woff2"),
}

@font-face {
  font-family: 'Roboto';
  font-style: medium;
  font-weight: 500;
  src: url('./common/assets/fonts/Roboto-Medium.eot') format("embedded-opentype"),
      url('./common/assets/fonts/Roboto-Medium.svg') format("svg"),
      url('./common/assets/fonts/Roboto-Medium.ttf') format("truetype"),
      url('./common/assets/fonts/Roboto-Medium.woff') format("woff"),
      url('./common/assets/fonts/Roboto-Medium.woff2') format("woff2"),
}

@font-face {
  font-family: 'Roboto';
  font-style: bold;
  font-weight: 700;
  src: url('./common/assets/fonts/Roboto-Bold.eot') format("embedded-opentype"),
      url('./common/assets/fonts/Roboto-Bold.svg') format("svg"),
      url('./common/assets/fonts/Roboto-Bold.ttf') format("truetype"),
      url('./common/assets/fonts/Roboto-Bold.woff') format("woff"),
      url('./common/assets/fonts/Roboto-Bold.woff2') format("woff2"),
}

body {
  margin: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow-x: hidden;

  * {
    font-family: 'Roboto';
  }
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

$circle-count: 8;
$animation-duration: .1s * $circle-count;
$spinkit-size: 48px;

.sk-fading-circle {
  position: relative;

  width: $spinkit-size;
  height: $spinkit-size;
  color: #7075e9;

  .sk-circle {
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0;
    top: 0;
  }

  .sk-circle::before {
    $width: round(.1 * $spinkit-size);
    content: '';
    display: block;
    margin: 0 auto;
    width: $width;
    height: $width;
    overflow: hidden;
    background-color: currentColor;
    border-radius: ($width / 2);
    animation: sk-circleFadeDelay $animation-duration infinite ease-in-out both;
  }

  @for $i from 1 through $circle-count {
    .sk-circle#{$i} {
      transform: rotate(360deg / $circle-count * ($i - 1));

      &::before {
        $a: -$animation-duration + ($i - 1) * $animation-duration/$circle-count;
        animation-delay: $a;
      }
    }
  }
}

@keyframes sk-circleFadeDelay {
  0%,
  39%,
  100% {
    opacity: 0;
  }

  40% {
    opacity: 1;
  }
}